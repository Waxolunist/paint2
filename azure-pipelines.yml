trigger:
- master
- feature/*

stages:
- stage: BuildWeb
  displayName: Build
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: []
  jobs:
    - job: buildandpush
      displayName: Build and Push
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
        displayName: 'Install Node.js'

      - task: Npm@1
        inputs:
          command: 'install'
        displayName: 'npm install'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'audit'
        displayName: 'npm audit'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'outdated'
        displayName: 'npm outdated'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run lint:warningson'
        displayName: 'npm lint'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            PAINT_VERSION=`npm version | grep paint2 | awk '{print $2}' | sed "s/[',]//g"`
            echo "Paint 2 version: ${PAINT_VERSION}"
            echo "##vso[task.setvariable variable=PAINT2_VERSION]${PAINT_VERSION}"
            SHORT_HASH=`git rev-parse --short=7 HEAD`  ## At least 7 digits, more if needed for uniqueness
            echo ""
            echo "Full git hash:  $(Build.SourceVersion)"
            echo "Short git hash: ${SHORT_HASH}"
            echo "##vso[task.setvariable variable=SHORT_HASH]$SHORT_HASH"
          workingDirectory: $(Build.SourcesDirectory)
        displayName: 'set version vars'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run bundle'
        displayName: 'npm bundle'
        env:
          BUILDID: $(Build.BuildId)
          COMMITID: $(SHORT_HASH)
          PAINT_VERSION: $(PAINT2_VERSION)

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test:coverage'
        displayName: 'npm test'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test:cy'    
        displayName: 'npm cypress'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coverage/junit.xml'
          testRunTitle: 'jest'
        displayName: 'publish test data jest'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coverage/cypress-junit.xml'
          testRunTitle: 'cypress'
        displayName: 'publish test data cypress'

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: 'coverage/cobertura-coverage.xml'
        displayName: 'publish coverage data'

      - script: |
          mkdir -p bundle/.well-known
          cp android/assetlinks.json bundle/.well-known/assetlinks.json
        workingDirectory: $(System.DefaultWorkingDirectory)
        displayName: Copy assetlinks

      - task: Bash@3
        displayName: create build artifact  
        inputs:
          targetType: 'filePath'
          filePath: $(System.DefaultWorkingDirectory)/scripts/build_info.sh
          workingDirectory: $(System.DefaultWorkingDirectory)
          arguments: 'build-$(Build.BuildId) commit-$(SHORT_HASH) $(PAINT2_VERSION)'

      - task: PublishBuildArtifacts@1
        displayName: publish build artifact
        inputs:
          pathToPublish: $(System.DefaultWorkingDirectory)/build_info.txt
          artifactName: buildinfo

      - task: Docker@2
        displayName: docker login
        inputs:
          command: login
          containerRegistry: dockerRegistryVcollaborate

      - task: Docker@2
        displayName: docker build and push
        inputs:
          command: buildAndPush
          repository: dev/waxolunist/paint2
          tags: |
            build-$(Build.BuildId)
            commit-$(SHORT_HASH)
            $(PAINT2_VERSION)

- stage: AndroidApp
  displayName: Android App
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: []
  jobs:
    - job: buildapp
      displayName: Build Android App
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '14.x'
          displayName: 'Install Node.js'

        - task: Npm@1
          inputs:
            command: 'custom'
            customCommand: 'install @bubblewrap/cli'
          displayName: 'install bubblewrap'

        - task: JavaToolInstaller@0
          displayName: install java 8
          inputs:
            versionSpec: '8'
            jdkArchitectureOption: 'x64'
            jdkSourceOption: 'PreInstalled'

        - task: ShellScript@2
          displayName: configure bubblewrap
          inputs:
            scriptPath: $(System.DefaultWorkingDirectory)/scripts/config_bubblewrap.sh
            cwd: $(System.DefaultWorkingDirectory)
            
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              npm run twa:build
            workingDirectory: $(Build.SourcesDirectory)
          displayName: 'build app'